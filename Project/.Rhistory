stateMap$state <- sapply(stateMap$state, cap)
isisData <- isis$Top.subregions.for.United.States
# rename Subregion to state to combine with stateMap
isisData <- rename(isis$Top.subregions.for.United.States, replace = c("Subregion" = "state"))
# subset out AK and HI (only continental U.S.)
isisData <- subset(isisData,  ! state %in% c("Hawaii", "Alaska"))
# combine data with stateMap
stateMap <- join(stateMap, isisData, by = "state")
# add colors for map
ramp <- colorRampPalette(c("white", brewer.pal(n=9, name="YlOrRd")), space="Lab")
stateMap$fillColor <- as.character(cut(stateMap$United.States, seq(0, 100, 10), include.lowest=TRUE, labels=ramp(10)))
# output data frames
stateMap
}
)
# Filter the isis data, returning a data frame with data to construct scatterplot
scatter <- reactive({
# create variable to change resolution of trending data
# load data create input variables
isis <- gtrends("ISIS", res=input$time, geo="US")
# create dataframe for trend line plot
isisTrend <- isis$trend
# output data frames
isisTrend
}
)
# Function for generating tooltip text
isis_tooltip <- function(x) {
# deal with missing values
if (is.null(x)) return(NULL)
if (is.null(x$group)) return(NULL)
# Pick out the state with this ID
statesHover <- isolate(map())
mapHover <- statesHover[statesHover$group == x$group, ]
# remove duplicates
mapHover <- mapHover[!duplicated(mapHover$state), ]
# select info to be shown in hover
paste0("<b>", mapHover$state, "</b><br>",
mapHover$United.States, "<br>")
}
# render map output
visualLine <- reactive({
# open plot
scatter %>%
ggvis(~start, y = ~ISIS.US) %>%
layer_points(stroke := "white") %>%
layer_model_predictions(model = "loess", se = TRUE, fill := "YlOrRd") %>%
add_axis("x", title = "Time", subdivide = 9, values = 1:6) %>%
add_axis("y", title = "Relative frequency of ISIS search") %>%
set_options(width=500, height=350, keep_aspect=TRUE)
})
# render map output
visualMap <- reactive({
# open plot
map %>%
group_by(group) %>%
ggvis(~long, ~lat) %>%
layer_paths(fill:=~fillColor, strokeOpacity := 0.5, strokeWidth := 0.1) %>%
add_tooltip(isis_tooltip, "hover") %>%
hide_axis("x") %>%
hide_axis("y") %>%
set_options(width=850, height=550, keep_aspect=TRUE)
})
# label visualization output
visualLine %>% bind_shiny("plot1")
visualMap %>% bind_shiny("plot2")
output$page <- renderUI({
div(class="outer",do.call(navbarPage,c(inverse=T, title = "Web Search interest: 'ISIS'",ui2())))
})
print(ui)
}
})
}
runApp(list(ui = ui, server = server))
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
showLogs()
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs()
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs()
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs()
rsconnect::showLogs()
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs()
rsconnect::showLogs('Google Drive/website/Rcode/gtrendExample/App')
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs('Google Drive/website/Rcode/gtrendExample/App')
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs('Google Drive/website/Rcode/gtrendExample/App')
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs('Google Drive/website/Rcode/gtrendExample/App')
shiny::runApp('Google Drive/website/Rcode/gtrendExample/App')
rsconnect::showLogs('Google Drive/website/Rcode/gtrendExample/App')
myNumbers <- c(7, 3, 0, 26, -1)
myNumbers[1] + myNumbers[2]
for (int i = 0; i < 2; i++) {
for (int j = 0; j < 3; j++) {
if (j % 2 == 1)
print(j);
else
print(i*j);
}
c(0, 5, 3, 8, 6, 11, 9, 14, 12, 17, 15, 20)
length(c(0, 5, 3, 8, 6, 11, 9, 14, 12, 17, 15, 20))
225, 196, 169, 144, 125,100,81,64
c(225, 196, 169, 144, 125,100,81,64)
81-64
100-81
125-100
6+13
13-6
27-13
54-27
223-111
(5*5) + (10*5) + (20*5)
(5*6) + (10*6) + (20*6)
(5*7) + (10*7) + (20*7)
6*36
216/24
60
60*54
3240/8
3240/12
3240/15
36*24
/6
864/6
6*36
/24
216/24
z = 8
11 - 7
8/4
c(225, 196, 169, 144, 125,100,81,64)
c(6,13,27,54,11,223)
13-6
27-13
54-27
111-54
223-111
225-196
9*54
486/12
486/13
486/15
486/9
#install.packages("gsheet")
library(gsheet)
library(stargazer)
library(plm)
library(interplot)
library(polycor)
dt <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1ExDJa9p6XPyWbT81ZU2urIXIMi3aPlcQ7iiKrwBatms/edit?usp=sharing")
dt$diff<-(dt$Ideology_Seniors3_3-dt$Ideology_NonSeniors3_3)
#Personal rank logged
dt$pers_ranklog<-log(dt$pers_rank)
#install.packages("plm")
#For country fixed effects
E<-pdata.frame(dt, index=c("Country","Year_survey"))
dt$orderofday <- as.factor(dt$orderofday)
dt$selectcommitee <- as.factor(dt$selectcommitee)
dt$Modifyorderday <- as.factor(dt$Modifyorderday)
dt$dischargePetitions <- as.factor(dt$dischargePetitions)
dt$agenda1 <- faPC$scores$scores[,1]
dt$agenda2 <- faPC$scores$scores[,2]
#AS body with party leaders
dt$LcontrolAS1<-ifelse(dt$agendaSetBody>2,1,0)
#AS body only with party leaders
dt$LcontrolAS2<-ifelse(dt$agendaSetBody==3,1,0)
range(dt$committeeDeadline)
#Longer committees means more power to them
dt$committeestrength<-abs(dt$committeeDeadline)/90
#Dischargepetitions
dt$dischargescale<-as.numeric(dt$dischargePetitions)
#No discharge petition at all
dt$nodischarge<-ifelse(dt$dischargePetitions==4,1,0)
#Constrained discharge
dt$constdischarge<-ifelse(as.numeric(dt$dischargePetitions)>2,1,0)
mod4<-lm(SPI_average~Ideology_Seniors3_3+Ideology_NonSeniors3_3+as.factor(Year_survey)+
#controls
pres_power+ mayority50 +  Withthepresident+
Ideology_Seniors3_3*LcontrolAS1,data=dt)
summary(mod4)
interplot(mod4,"Ideology_Seniors3_3","LcontrolAS1")
#With leaders role in AS body as 1 (WORKING)
mod4<-lm(TaxavSession~Ideology_Seniors3_3+Ideology_NonSeniors3_3+as.factor(Year_survey)+
#controls
pres_power+ mayority50 +  Withthepresident+
Ideology_Seniors3_3*LcontrolAS1,data=dt)
summary(mod4)
interplot(mod4,"Ideology_Seniors3_3","LcontrolAS1")
#With SPI ALSO WORKS FINE
mod4<-lm(SPI_average~Ideology_Seniors3_3+Ideology_NonSeniors3_3+as.factor(Year_survey)+
#controls
pres_power+ mayority50 +  Withthepresident+
Ideology_Seniors3_3*LcontrolAS1,data=dt)
summary(mod4)
interplot(mod4,"Ideology_Seniors3_3","LcontrolAS1")
dt$Lcontrolsnomination<-ifelse(dt$pers_rank==1,1,0)
dt$Mod<-as.numeric(dt$Modifyorderday)
#DOESNT WORK WITH SPI AVERAGE
mod10<-lm(SPI_average~Ideology_Seniors3_3+Ideology_NonSeniors3_3+as.factor(Year_survey)+
#controls
pres_power+ mayority50 +  Withthepresident+
#economic controls
#GDP_growth+unemployment+
Ideology_Seniors3_3*Mod
,data=dt)
summary(mod10)
#WORKS! BOTH WITH ECONOMIC CONTROL AND WITHOUT
mod10<-lm(TaxavSession~Ideology_Seniors3_3+Ideology_NonSeniors3_3+as.factor(Year_survey)+
#controls
pres_power+ mayority50 +  Withthepresident+
#economic controls
#GDP_growth+unemployment+
Ideology_Seniors3_3*Mod
,data=dt)
summary(mod10)
#DOESNT WORK WITH SPI AVERAGE
mod10<-lm(SPI_average~Ideology_Seniors3_3+Ideology_NonSeniors3_3+as.factor(Year_survey)+
#controls
pres_power+ mayority50 +  Withthepresident+
#economic controls
#GDP_growth+unemployment+
Ideology_Seniors3_3*Mod
,data=dt)
summary(mod10)
interplot(mod10,"Ideology_Seniors3_3","Mod")
#With SPI we get the opposite results from those expected
mod7<-lm(SPI_average~Ideology_Seniors3_3+Ideology_NonSeniors3_3+as.factor(Year_survey)+
#controls
pres_power+ mayority50 +  Withthepresident+
#Ideology_NonSeniors3_3*pers_rank+
Ideology_Seniors3_3*pers_rank,data=dt)
summary(mod7)
interplot(mod7,"Ideology_Seniors3_3","pers_rank")
# load necessary libraries
library(stm)
library(ExpAgenda)
library(MCMCpack)
library(frm)
#library(translateR)
# load data
setwd("~/Google Drive/WashU/projects/churchPublicOpinion/data")
john_paul_ii_Data <- read.csv("popeData/john-paul-ii/john-paul-ii-Data-raw.csv", stringsAsFactors = F)
benedict_xvi_Data <- read.csv("popeData/benedict-xvi/benedict-xvi-Data-raw.csv", stringsAsFactors = F)
francesco_Data <- read.csv("popeData/francis/francis-Data-raw.csv", stringsAsFactors = F)
# combine dataframes (currently just taking a sample)
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# remove special characters (including punctuation)
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# handle encoded content
Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeTopics-Data-raw.csv")
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
#
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeTopics-Data-raw.csv")
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
#
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# now clean up titles of documents
Encoding(popeDataEN$title) <- "UTF-8"
popeDataEN$title <- iconv(popeDataEN$title, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$title <- gsub("[^[:alnum:]///' ]", "", popeDataEN$title)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeTopics-Data-raw.csv")
john_paul_ii_Data <- read.csv("popeData/john-paul-ii/john-paul-ii-Data-raw.csv", stringsAsFactors = F, encoding="UTF-8")
benedict_xvi_Data <- read.csv("popeData/benedict-xvi/benedict-xvi-Data-raw.csv", stringsAsFactors = F, encoding="UTF-8")
francesco_Data <- read.csv("popeData/francis/francis-Data-raw.csv", stringsAsFactors = F, encoding="UTF-8")
# combine dataframes (currently just taking a sample)
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
#
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
#Encoding(popeDataEN$content) <- "UTF-8"
#popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
#popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# now clean up titles of documents
#Encoding(popeDataEN$title) <- "UTF-8"
#popeDataEN$title <- iconv(popeDataEN$title, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$title <- gsub("[^[:alnum:]///' ]", "", popeDataEN$title)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeTopics-Data-raw.csv")
# load necessary libraries
library(stm)
library(ExpAgenda)
library(MCMCpack)
library(frm)
#library(translateR)
##############
### clean data
##############
# load data
setwd("~/Google Drive/WashU/projects/churchPublicOpinion/data")
john_paul_ii_Data <- read.csv("popeData/john-paul-ii/john-paul-ii-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
benedict_xvi_Data <- read.csv("popeData/benedict-xvi/benedict-xvi-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
francesco_Data <- read.csv("popeData/francis/francis-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
# combine dataframes (currently just taking a sample)
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
#
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# now clean up titles of documents
Encoding(popeDataEN$title) <- "UTF-8"
popeDataEN$title <- iconv(popeDataEN$title, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$title <- gsub("[^[:alnum:]///' ]", "", popeDataEN$title)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeTopics-Data-raw.csv")
popeData <- read.csv("popeData/benedict-xvi/benedict-xvi-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# now clean up titles of documents
Encoding(popeDataEN$title) <- "UTF-8"
popeDataEN$title <- iconv(popeDataEN$title, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$title <- gsub("[^[:alnum:]///' ]", "", popeDataEN$title)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeContentEN-Data-raw.csv")
john_paul_ii_Data <- read.csv("popeData/john-paul-ii/john-paul-ii-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
benedict_xvi_Data <- read.csv("popeData/benedict-xvi/benedict-xvi-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
francesco_Data <- read.csv("popeData/francis/francis-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
# combine dataframes (currently just taking a sample)
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
#
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
#Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# now clean up titles of documents
#Encoding(popeDataEN$title) <- "UTF-8"
popeDataEN$title <- iconv(popeDataEN$title, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$title <- gsub("[^[:alnum:]///' ]", "", popeDataEN$title)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeContentEN-Data-raw.csv")
john_paul_ii_Data <- read.csv("popeData/john-paul-ii/john-paul-ii-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
benedict_xvi_Data <- read.csv("popeData/benedict-xvi/benedict-xvi-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
francesco_Data <- read.csv("popeData/francis/francis-Data-raw.csv", encoding="UTF-8", stringsAsFactors = F)
# combine dataframes (currently just taking a sample)
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
#
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# now clean up titles of documents
#Encoding(popeDataEN$title) <- "UTF-8"
popeDataEN$title <- iconv(popeDataEN$title, "UTF-8", "UTF-8",sub='')
# remove special characters (including punctuation)
popeDataEN$title <- gsub("[^[:alnum:]///' ]", "", popeDataEN$title)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeContentEN-Data-raw.csv")
popeData <- rbind(john_paul_ii_Data, benedict_xvi_Data, francesco_Data)
# re-assign factor variables (type, pope, etc.)
popeData$type <- as.factor(popeData$type)
popeData$language <- as.factor(popeData$language)
popeData$pope <- as.factor(popeData$pope)
popeData$year <- as.numeric(popeData$year)
# translate content
#
# subset to only English docs initially (reduces to 11959/22540 original docs)
popeDataEN <- popeData[which(popeData$language=='en'),]
# handle encoded content
Encoding(popeDataEN$content) <- "UTF-8"
popeDataEN$content <- iconv(popeDataEN$content, "UTF-8", "ASCII",sub='')
popeDataEN$content <- gsub("[^[:alnum:]///' ]", "", popeDataEN$content)
# now clean up titles of documents
Encoding(popeDataEN$title) <- "UTF-8"
popeDataEN$title <- iconv(popeDataEN$title, "UTF-8", "ASCII",sub='')
# remove special characters (including punctuation)
popeDataEN$title <- gsub("[^[:alnum:]///' ]", "", popeDataEN$title)
# right now, drop 538 w/o year (from original 11959)
# n = 11421
popeDataEN <- popeDataEN[complete.cases(popeDataEN),]
# remove special characters (including punctuation)
write.csv(popeDataEN, file = "popeData/popeContentEN-Data-raw.csv")
library(plyr)
setwd ("~/Documents/Git/PythonClass-2015/Project")
catch <- read.csv("europeanParliamentMinutes.csv", strip.white = TRUE)
catch2 <- strsplit(as.character(catch$Catch.the.Eye), ', ')
catch3 <- data.frame(Catch.the.Eye=unlist(catch2), Date=rep(catch$Date, sapply(catch2, FUN=length)))
catch4 <- strsplit(as.character(catch3$Catch.the.Eye), ' and ')
catch5 <- data.frame(Catch.the.Eye=unlist(catch4), Date=rep(catch3$Date, sapply(catch4, FUN=length)))
names(catch5)[names(catch5) == 'Catch.the.Eye'] <- 'Name'
countries <- read.csv("~/Dropbox/MEP Vote Seeking/ballotStructure/data/7EP/7th EP Votes/EP7votes.csv", encoding="UTF-8")
countries <- countries[!duplicated(countries[2:3]),]
countries <- countries[c("Name", "State")]
catch5 <-join(catch5, countries, by = "Name")
Date <- aggregate(Name ~ Date, data = catch5, FUN = length, na.action = na.pass)
MEP <- aggregate(Date ~ Name, data = catch5, FUN = length, na.action = na.omit)
axis(1, labels=T); axis(2, labels=T)
plot(density(Date$Name), main="Catch The Eye Invoked by Date", xlab="Number of debates", axes=F)
axis(1, labels=T); axis(2, labels=T)
plot(density(MEP$Date), main="Catch The Eye Invoked by Individual MEPs", xlab="Number of Procedures Invoked", axes=F)
axis(1, labels=T); axis(2, labels=T)
MEP
Date
MEP
