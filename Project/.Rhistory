sampleVariance * solve(crossprod(x))
vcov(model)
cov(model)
sampleVariance <- (1 / (length(x)-1)) * sum(x - mean(x)) * sum(y - mean(y))
sampleVariance * solve(crossprod(x))
sum(x - mean(x))
sampleVariance <- (1 / length(x)) * sum(x - 0) * sum(y - 0)
sampleVariance * solve(crossprod(x))
vcov(model)
sampleVariance <- (1 / length(x)) * sum((x - 0) * (y - 0))
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / (length(x) - 1)) * sum((x - mean(x)) * (y - mean(y)))
sampleVariance * solve(crossprod(x))
mean(x)
mean(y)
x <- matrix(c(1, 1, 1, 1, 1, rnorm(20, mean = 0, sd = 2)), ncol=3)
x <- matrix(c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, rnorm(20, mean = 0, sd = 2)), ncol=3)
y <- rnorm(10, mean = 0, sd = 1)
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x)
coef(model)
sampleVariance <- (1 / (length(x) - 1)) * sum((x - mean(x)) * (y - mean(y)))
sampleVariance * solve(crossprod(x))
vcov(model)
sampleVariance <- (1 / length(x)) * sum((x - 0) * (y - 0))
sampleVariance * solve(crossprod(x))
sum((x - 0) * (y - 0))
length(x)
sampleVariance <- (1 / 10) * sum((x - 0) * (y - 0))
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / (10 - 1)) * sum((x - mean(x)) * (y - mean(y)))
sampleVariance * solve(crossprod(x))
vcov(model)
sampleVariance <- (1 / 20) * sum((x - 0) * (y - 0))
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / 10) * sum((x - 0) * (y - 0))
sampleVariance * solve(crossprod(x))
sd(x)
sample(variance)
sampleVariance
sampleVariance <- (1 / 10) * sum((x - 0)^2)
sampleVariance * solve(crossprod(x))
vcov(model)
sampleVariance <- (1 / 30) * sum((x - 0)^2)
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / length(x)) * sum((x - 0)^2)
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / (length(x)-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
vcov(model)
sampleVariance <- (1 / 10-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / (10-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / (20-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
(length(x)
(length(x)
sampleVariance <- (1 / (length(x)-1)) * sum((x - mean(x))^2)
sampleVariance <- (1 / (length(x)-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
vcov(x)
vcov(model)
sampleVariance <- (1 / length(x)) * sum((x - 0)^2)
sampleVariance * solve(crossprod(x))
sampleVariance <- (1 / 10) * sum((x - 0)^2)
sampleVariance * solve(crossprod(x))
x
sampleVariance <- (1 / (length(x)-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
sd(x)
sampleVariance
sd(x)^2
sampleVariance <- (1 / length(x)) * sum((x - 0)^2)
sampleVariance
sd(x)^2
seq(1, 1, length=20)
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 0, sd = 2)), ncol=3)
x
y <- rnorm(20, mean = 0, sd = 1)
x <- matrix(c(seq(1, 1, length = 20), rnorm(40, mean = 0, sd = 2)), ncol=3)
crossprod(solve(crossprod(x)), crossprod(x, y))
model <- lm(y ~ x)
coef(model)
sampleVariance <- (1 / length(x)-1) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
vcov(model)
sd(x)^2
sampleVariance
sampleVariance <- (1 / (length(x)-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
sampleVariance
sampleVariance <- (1 / (20-1)) * sum((x - mean(x))^2)
sampleVariance * solve(crossprod(x))
vcov(model)
4 * solve(crossprod(x))
vcov(model)
y <- rnorm(20, mean = 0, sd = 1)
x <- matrix(c(seq(1, 1, length = 20), rnorm(40, mean = 0, sd = 1)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x)
coef(model)
1 * solve(crossprod(x))
vcov(model)
var(x)
crossprod(solve(crossprod(x)), crossprod(x, y))
var([,2])
var(x[,2])
model <- lm(y ~ x[,-1])
coef(model)
vcov(model)
var(x[,2])
model <- lm(y ~ x)
coef(model)
model <- lm(y ~ x[,-1])
coef(model)
crossprod(solve(crossprod(x)), crossprod(x, y))
y <- rnorm(10, mean = 0, sd = 1)
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 0, sd = 1)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x[,-1])
coef(model)
# var
1 * solve(crossprod(x))
vcov(model)
sd(x)^2 * solve(crossprod(x))
sd(x)^2
y <- rnorm(20, mean = 0, sd = 1)
x <- matrix(c(seq(1, 1, length = 20), rnorm(40, mean = 0, sd = 1)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x[,-1])
coef(model)
sd(x)^2 * solve(crossprod(x))
vcov(model)
1 * solve(crossprod(x))
1
1
1
y <- rnorm(10, mean = 0, sd = 1)
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 0, sd = 1)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x[,-1])
coef(model)
#
sd(x)^2 * solve(crossprod(x))
vcov(model)
y <- rnorm(10, mean = 0, sd = 0)
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 0, sd = 0)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 0, sd = 4)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x[,-1])
coef(model)
y <- rnorm(10, mean = 0, sd = 1)
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 5, sd = 1)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x[,-1])
coef(model)
sd(x)^2 * solve(crossprod(x))
vcov(model)
1 * solve(crossprod(x))
y <- rnorm(10, mean = 5, sd = 1)
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 5, sd = 1)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x[,-1])
coef(model)
1 * solve(crossprod(x))
vcov(model)
sd(x)^2 * solve(crossprod(x))
sqrt(1) * solve(crossprod(x))
sqrt(1)
y <- rnorm(10, mean = 0, sd = 1)
x <- matrix(c(seq(1, 1, length = 10), rnorm(20, mean = 0, sd = 1)), ncol=3)
# X'X
crossprod(x)
# X'X^-1
solve(crossprod(x))
# X'Y
crossprod(x, y)
# b = X'X^-1 X'Y
crossprod(solve(crossprod(x)), crossprod(x, y))
# double check coefficient estimates with default regression function
model <- lm(y ~ x[,-1])
coef(model)
#
1 * solve(crossprod(x))
vcov(model)
ANES <- read.spss("~/Dropbox/regressionBook/potentialDatasets/americanData/ANES/data/anes2008_2009.sav")
library(foreign)
ANES <- read.spss("~/Dropbox/regressionBook/potentialDatasets/americanData/ANES/data/anes2008_2009.sav")
head(ANES)
View(ANES)
ANES$V085201a
V084003a$ANES
ANES$V084003a
ANES$R1_INTVR41
ANES$V084001a
names(ANES)
?head
tail(names(ANES))
levels(ANES)
ANES <- read.spss("~/Dropbox/regressionBook/potentialDatasets/americanData/ANES/data/anes_timeseries_2008.sav")
ANES <- read.spss("~/Dropbox/regressionBook/potentialDatasets/americanData/ANES/data/anes_timeseries_2008.sav")
ANES <- read.spss("~/Dropbox/regressionBook/potentialDatasets/americanData/ANES/data/anes2008/anes_timeseries_2008.sav")
ANES$V085201a
write.csv(ANES, file = "~/Dropbox/regressionBook/potentialDatasets/americanData/ANES/data/anes2008/anes_timeseries_2008.csv")
plot(ANES$V085201a)
levels(ANES$V085201a)
hist(ANES$V085201a)
slave <- read.dta("~/Dropbox/regressionBook/potentialDatasets/comparativeData/slaveTrade/slave_exports.dta")
head(slave)
names(slave)
slave$slave_exports.dta
slave$atlantic_all_years
hist(slave$atlantic_all_years)
hist(slave$indian_all_years)
slave$indian_all_years
slave$total <- slave$indian_all_years + slave$atlantic_all_years
slave$total
hist(slave$total)
slave$indian_all_years
slave$atlantic_all_years
slave$total
?hist
hist(slave$total,  xlim=(0,100000))
hist(slave$total,  xlim=c(0,100000))
hist(slave$total,  xlim=c(0,200000))
hist(slave$total,  xlim=c(0,600000))
density(slave$total,  xlim=c(0,600000))
View(slave)
plot(density(slave$total))
plot(density(slave$total, xlim=c(0,100000)))
?density
plot(density(slave$total), xlim=c(0,100000))
plot(density(slave$total), xlim=c(0,10000))
write.csv(slave, file = "~/Dropbox/regressionBook/potentialDatasets/comparativeData/slaveTrade/slave_exports.csv")
slave <- read.csv("~/Dropbox/regressionBook/potentialDatasets/comparativeData/slaveTrade/slave_exports.csv")
View(slave)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="Exported slaves", axes=F)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="Exported slaves", axes=F, xlim=c(0,100000))
axis(1, labels=T); axis(2, labels=T)
axis(1, labels=T); axis(2, labels=F)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="Exported slaves", axes=F, xlim=c(0,100000))
axis(1, labels=T); axis(2, labels=F)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,100000))
axis(1, labels=F); axis(2, labels=F)
axis(1, labels=T); axis(2, labels=F)
axis(1, labels=T); axis(2, labels=T)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,100000))
axis(1, labels=T); axis(2, labels=T)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,50000))
axis(1, labels=T); axis(2, labels=T)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
axis(1, labels=T); axis(2, labels=T)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F)
axis(1, labels=T); axis(2, labels=T)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
axis(1, labels=T); axis(2, labels=T)
mtext (side=1, line=1, text="Exported slaves", at=mean(slave$total))
mtext (side=1, line=3, text="Exported slaves", at=mean(slave$total))
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
axis(1, labels=T); axis(2, labels=T)
mtext (side=1, line=2, text="Exported slaves", at=mean(slave$total))
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
axis(1, labels=T); axis(2, labels=T)
mtext (side=1, line=3, text="Exported slaves", at=mean(slave$total))
mtext (side=1, line=3, text="Exported slaves", at=0.03)
mtext (side=2, line=3, text="Exported slaves", at=0.03)
mtext (side=2, line=3, text="Exported slaves", at=0.003)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
axis(1, labels=T); axis(2, labels=T)
mtext (side=1, line=3, text="Exported slaves", at=mean(slave$total))
mtext (side=2, line=3, text="Exported slaves", at=0.003)
plot (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
axis(1, labels=T); axis(2, labels=T)
mtext (side=1, line=3, text="Exported slaves", at=mean(slave$total))
mtext (side=2, line=3, text="Density", at=0.003)
line (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
lines (density (slave$total), main="Density of slaves exported by tribe", xlab="", ylab="", axes=F, xlim=c(0,25000))
lines (density (slave$total), main="Density of slaves exported by tribe", xlim=c(0,25000))
axis(1, labels=T); axis(2, labels=T)
?lines
lines (density (slave$total), main="Density of slaves exported by tribe")
axis(1, labels=T); axis(2, labels=T)
mtext (side=1, line=3, text="Exported slaves", at=mean(slave$total))
mtext (side=2, line=3, text="Density", at=0.003)
lines (density (slave$total), main="Density of slaves exported by tribe")
curve(dnorm(x, mean(slave$total), sd(slave$total)), xlim=c(0, max(slave$total)), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, mean(slave$total), sd(slave$total)), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
sd(slave$total)
curve(dnorm(x, mean(slave$total), 10), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, mean(slave$total), 100), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, mean(slave$total), 1000), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, mean(slave$total), 10000), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, mean(slave$total), 5000), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, mean(slave$total), 2000), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
mean(slave$total)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(north.districts.Mexico$PRI.share), lwd=2, lty=2)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
lines (density(slave$total), lwd=2, lty=2)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
mtext (side=1, line=3, text="Exported slaves", at=mean(slave$total))
mtext (side=2, line=3, text="Density", at=0.003)
lines (density(slave$total), lwd=2, lty=2)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), ylim=c(0, .05), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), ylim=c(0, .5), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), ylim=c(0, .005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), ylim=c(0, .0005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
axis(1, labels=T); axis(2, labels=T)
?dnorm
curve(dnorm(x, 10000, 1), xlim=c(0, 25000), ylim=c(0, .0005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, 10000, 100), xlim=c(0, 25000), ylim=c(0, .0005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, 10000, 200), xlim=c(0, 25000), ylim=c(0, .0005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 200), xlim=c(0, 25000), ylim=c(0, .05), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, 10000, 200), xlim=c(0, 25000), ylim=c(0, .5), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
curve(dnorm(x, 10000, 200), xlim=c(0, 25000), ylim=c(0, .005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
axis(1, labels=T); axis(2, labels=T)
lines (density(slave$total), lwd=2, lty=2)
curve(dnorm(x, 10000, 500), xlim=c(0, 25000), ylim=c(0, .005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 1000), xlim=c(0, 25000), ylim=c(0, .005), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 1000), xlim=c(0, 25000), ylim=c(0, .01), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 1000), xlim=c(0, 25000), ylim=c(0, .0075), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 1000), xlim=c(0, 25000), ylim=c(0, .01), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 2000), xlim=c(0, 25000), ylim=c(0, .01), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 10000, 500), xlim=c(0, 25000), ylim=c(0, .01), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
curve(dnorm(x, 1000, 500), xlim=c(0, 25000), ylim=c(0, .01), xlab="", ylab="", main="Density of slaves exported by tribe", axes=F)
lines (density(slave$total), lwd=2, lty=2)
axis(1, labels=T); axis(2, labels=T)
?dnrom
?dnorm
library(foreign)
data <- read.dta("~/Dropbox/MEP Vote Seeking/ballotStructure/data/outcomeVariables/EES_MEP_survey.dta")
view(data)
View(data)
library(foreign)
euro <- read.dta(~/Downloads/ZA5933_v5-0-0.dta)
euro <- read.dta("~/Downloads/ZA5933_v5-0-0.dta")
View(euro)
names(euro)
levels(p7$euro)
levels(euro$p7)
levels(euro$p7cz)
levels(euro$p7de)
levels(euro$p6de)
levels(euro$p8)
levels(euro$p8de)
levels(euro$p6de)
levels(euro$p7de)
library(foreign)
euro <- read.dta("~/Downloads/ZA5932_v2-0-1.dta")
names(euro)
level(euro$p6)
levels(euro$p6)
levels(euro$p7)
levels(euro$p7hr)
levels(euro$p7fr)
names(euro)
levels(euro$p7be_r)
levels(euro$p7be)
levels(euro$p7fr)
levels(euro$p7ir)
levels(euro$p7ie)
levels(euro$p7it)
levels(euro$p7it_r1)
levels(euro$p7p7fr_r)
names(euro)
levels(euro$p7fr_r)
levels(euro$p7pl_r)
levels(euro$p7pl)
levels(euro$p7pl_r)
levels(euro$p7uk)
levels(euro$p7gb_r)
levels(euro$p7gb)
library(plyr)
setwd ("~/Documents/Git/PythonClass-2015/Project")
catch <- read.csv("europeanParliamentMinutes.csv", strip.white = TRUE)
catch2 <- strsplit(as.character(catch$Catch.the.Eye), ', ')
catch3 <- data.frame(Catch.the.Eye=unlist(catch2), Date=rep(catch$Date, sapply(catch2, FUN=length)))
catch4 <- strsplit(as.character(catch3$Catch.the.Eye), ' and ')
catch5 <- data.frame(Catch.the.Eye=unlist(catch4), Date=rep(catch3$Date, sapply(catch4, FUN=length)))
names(catch5)[names(catch5) == 'Catch.the.Eye'] <- 'Name'
countries <- read.csv("~/Dropbox/MEP Vote Seeking/ballotStructure/data/7EP/7th EP Votes/EP7votes.csv")
countries <- unique(countries$Name, countries%)
catch5 <-join(catch5, countries, by = "Name")
View(catch5)
catch5 <- data.frame(Catch.the.Eye=unlist(catch4), Date=rep(catch3$Date, sapply(catch4, FUN=length)))
countries <- countries[!duplicated(countries[2:3]),]
View(countries)
countries <- read.csv("~/Dropbox/MEP Vote Seeking/ballotStructure/data/7EP/7th EP Votes/EP7votes.csv")
View(countries)
countries <- countries[!duplicated(countries[2:3]),]
View(countries)
countries <- countries[c(Name, State)]
View(countries)
countries <- countries[c(countries$Name, countries$State)]
countries <- countries[c("Name", "State")]
View(countries)
catch5 <-join(catch5, countries, by = "Name")
View(catch5)
names(catch5)[names(catch5) == 'Catch.the.Eye'] <- 'Name'
catch5 <-join(catch5, countries, by = "Name")
View(catch5)
countries <- read.csv("~/Dropbox/MEP Vote Seeking/ballotStructure/data/7EP/7th EP Votes/EP7votes.csv", encoding="UTF-8")
countries <- countries[!duplicated(countries[2:3]),]
countries <- countries[c("Name", "State")]
View(countries)
catch5 <-join(catch5, countries, by = "Name")
View(catch5)
catch <- read.csv("europeanParliamentMinutes.csv", strip.white = TRUE)
catch2 <- strsplit(as.character(catch$Catch.the.Eye), ', ')
catch3 <- data.frame(Catch.the.Eye=unlist(catch2), Date=rep(catch$Date, sapply(catch2, FUN=length)))
catch4 <- strsplit(as.character(catch3$Catch.the.Eye), ' and ')
catch5 <- data.frame(Catch.the.Eye=unlist(catch4), Date=rep(catch3$Date, sapply(catch4, FUN=length)))
View(catch5)
names(catch5)[names(catch5) == 'Catch.the.Eye'] <- 'Name'
View(catch5)
catch5 <- catch5[!catch5$Name %in% c("blue card", "spoke"), ]
View(catch5)
catch5 <- catch5[!catch5$Name %in% c("blue card", "spoke"), ]
